{"version":3,"sources":["../../src/Controller/BrokenLinksController.js"],"names":["BrokenLinksController","constructor","args","logger","Logger","start","callback","event","progress","Promise","resolve","reject","output","doesFolderExist","brokenLinksService","BrokenLinksService","on","report","toLog","verbose","console","log","toString","then","catch","e"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;AAEA;AACe,MAAMA,qBAAN,CAA4B;AAIvCC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,eAAJ,CAAWF,IAAX,CAAd;AACH;AAED;;;;;;;;AAMAG,EAAAA,KAAK,GAA8D;AAAA,QAA7DC,QAA6D,uEAAxC,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE,CAAiB;AAC/D,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,WAAKT,IAAL,CAAUU,MAAV,CAAiBC,eAAjB;AACA,UAAIC,kBAAkB,GAAG,IAAIC,2BAAJ,CAAuB,KAAKb,IAA5B,CAAzB;AACAY,MAAAA,kBAAkB,CAACE,EAAnB,CAAsB,OAAtB,EAA+BR,QAAQ,IAAI;AACvCF,QAAAA,QAAQ,CAAC,OAAD,EAAUE,QAAV,CAAR;AACA,aAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB;;AACA,YAAI,KAAKhB,IAAL,CAAUiB,OAAd,EAAuB;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ;AACH;AACJ,OAND,EAMGN,EANH,CAMM,UANN,EAMkBR,QAAQ,IAAI;AAC1BF,QAAAA,QAAQ,CAAC,UAAD,EAAaE,QAAb,CAAR;AACA,aAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB;;AACA,YAAI,KAAKhB,IAAL,CAAUiB,OAAd,EAAuB;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ;AACH;AACJ,OAZD,EAYGN,EAZH,CAYM,UAZN,EAYkBR,QAAQ,IAAI;AAC1BF,QAAAA,QAAQ,CAAC,UAAD,EAAaE,QAAb,CAAR;;AACA,YAAI,KAAKN,IAAL,CAAUiB,OAAd,EAAuB;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;AACJ,OAjBD;AAkBAP,MAAAA,kBAAkB,CAACT,KAAnB,GACKkB,IADL,CACU,MAAMb,OAAO,EADvB,EAEKc,KAFL,CAEWC,CAAC,IAAId,MAAM,CAACc,CAAD,CAFtB;AAGH,KAxBM,CAAP;AAyBH;;AAzCsC","sourcesContent":["// @flow\n\nimport BrokenLinksService from '../Service/BrokenLinksService';\nimport Logger from '../Utility/Logger';\nimport Args from \"../Model/Args\";\n\n// noinspection JSUnusedGlobalSymbols\nexport default class BrokenLinksController {\n    args: Args;\n    logger: Logger;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.logger = new Logger(args);\n    }\n\n    /**\n     * @todo: Finished but did not exit.\n     * @todo: add callback\n     * @todo: flow\n     * @returns {Promise}\n     */\n    start(callback: function = (event, progress) => {}): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.args.output.doesFolderExist();\n            let brokenLinksService = new BrokenLinksService(this.args);\n            brokenLinksService.on('start', progress => {\n                callback('start', progress);\n                this.logger.report(progress.toLog());\n                if (this.args.verbose) {\n                    console.log(progress.toString());\n                }\n            }).on('progress', progress => {\n                callback('progress', progress);\n                this.logger.report(progress.toLog());\n                if (this.args.verbose) {\n                    console.log(progress.toString());\n                }\n            }).on('complete', progress => {\n                callback('complete', progress);\n                if (this.args.verbose) {\n                    console.log('Done');\n                }\n            });\n            brokenLinksService.start()\n                .then(() => resolve())\n                .catch(e => reject(e));\n        });\n    }\n}\n"],"file":"BrokenLinksController.js"}