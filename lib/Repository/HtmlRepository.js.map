{"version":3,"sources":["../../src/Repository/HtmlRepository.js"],"names":["HtmlRepository","constructor","projectFolder","file","url","getProjectsHtmlFolder","name","projectsPathHtml"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;AAGA,MAAMA,cAAN,CAAqB;AAEjB;;;;AAIAC,EAAAA,WAAW,CAACC,aAAD,EAAgB;AACvB;;;;AAIA,SAAKA,aAAL,GAAqBA,aAArB;AACH;AAED;;;;;;;AAKAC,EAAAA,IAAI,CAACC,GAAD,EAAM;AACN,WAAO,gBAAK,KAAKC,qBAAL,EAAL,EAAmCD,GAAG,CAACE,IAAJ,GAAW,OAA9C,CAAP;AACH;AAED;;;;;;AAIAD,EAAAA,qBAAqB,GAAG;AACpB,QAAIE,gBAAgB,GAAG,gBAAK,KAAKL,aAAV,EAAyB,MAAzB,CAAvB;;AACA,QAAI,CAAC,oBAAWK,gBAAX,CAAL,EAAmC;AAC/B,yBAAUA,gBAAV;AACH;;AACD,WAAOA,gBAAP;AACH;;AAjCgB;;eAoCNP,c","sourcesContent":["import { existsSync, mkdirSync } from 'fs';\nimport Url from '../Model/Url';\nimport { join } from \"path\";\n\n/**\n * Save the url html to file.\n */\nclass HtmlRepository {\n\n    /**\n     * Build a json url repo.\n     * @param projectFolder {string}\n     */\n    constructor(projectFolder) {\n        /**\n         * Location to the html folder in the project.\n         * @type {string}\n         */\n        this.projectFolder = projectFolder;\n    }\n\n    /**\n     * Gets the full path to the html file.\n     * @param url {Url}\n     * @returns {string}\n     */\n    file(url) {\n        return join(this.getProjectsHtmlFolder(), url.name + '.html');\n    }\n\n    /**\n     * Creates the html folder in the project if it doesn't exist.\n     * @returns {string} for the html folder.\n     */\n    getProjectsHtmlFolder() {\n        let projectsPathHtml = join(this.projectFolder, 'html');\n        if (!existsSync(projectsPathHtml)) {\n            mkdirSync(projectsPathHtml);\n        }\n        return projectsPathHtml;\n    }\n}\n\nexport default HtmlRepository;"],"file":"HtmlRepository.js"}