{"version":3,"sources":["../../src/Repository/HtmlRepository.js"],"names":["HtmlRepository","constructor","projectFolder","file","url","getProjectsHtmlFolder","name","projectsPathHtml"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,cAAN,CAAqB;AAEhC;;;;AAKA;;;AAGAC,EAAAA,WAAW,CAACC,aAAD,EAAwB;AAC/B,SAAKA,aAAL,GAAqBA,aAArB;AACH;AAED;;;;;AAGAC,EAAAA,IAAI,CAACC,GAAD,EAAmB;AACnB,WAAO,gBAAK,KAAKC,qBAAL,EAAL,EAAmCD,GAAG,CAACE,IAAJ,GAAW,OAA9C,CAAP;AACH;AAED;;;;;AAGAD,EAAAA,qBAAqB,GAAW;AAC5B,QAAIE,gBAAgB,GAAG,gBAAK,KAAKL,aAAV,EAAyB,MAAzB,CAAvB;;AACA,QAAI,CAAC,oBAAWK,gBAAX,CAAL,EAAmC;AAC/B,yBAAUA,gBAAV;AACH;;AACD,WAAOA,gBAAP;AACH;;AA9B+B","sourcesContent":["// @flow\nimport {existsSync, mkdirSync} from 'fs';\nimport Url from '../Model/Url';\nimport {join} from \"path\";\n\n/**\n * Save the url html to file.\n */\nexport default class HtmlRepository {\n\n    /**\n     * Location to the html folder in the project.\n     */\n    projectFolder: string;\n\n    /**\n     * Build a json url repo.\n     */\n    constructor(projectFolder: string) {\n        this.projectFolder = projectFolder;\n    }\n\n    /**\n     * Gets the full path to the html file.\n     */\n    file(url: Url): string {\n        return join(this.getProjectsHtmlFolder(), url.name + '.html');\n    }\n\n    /**\n     * Creates the html folder in the project if it doesn't exist.\n     */\n    getProjectsHtmlFolder(): string {\n        let projectsPathHtml = join(this.projectFolder, 'html');\n        if (!existsSync(projectsPathHtml)) {\n            mkdirSync(projectsPathHtml);\n        }\n        return projectsPathHtml;\n    }\n}\n"],"file":"HtmlRepository.js"}