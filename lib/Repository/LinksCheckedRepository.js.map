{"version":3,"sources":["../../src/Repository/LinksCheckedRepository.js"],"names":["LinksCheckedRepository","constructor","args","folder","createBrokenLinksFolder","db","Database","databaseFile","insertStatement","prepare","find","link","get","url","save","linkChecked","run","working","close","output","filename","getSiteName","tempDbFile","__filename"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAOe,MAAMA,sBAAN,CAA6B;AAGxC;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAKA;;;;AAIAC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,uBAAL;AACA,SAAKC,EAAL,GAAU,IAAIC,qBAAJ,CAAa,KAAKC,YAAlB,EAAgC,EAAhC,CAAV;AACA,SAAKC,eAAL,GAAuB,KAAKH,EAAL,CAAQI,OAAR,CAAgB,yCAAhB,CAAvB;AACH;AAED;;;;;AAGAC,EAAAA,IAAI,CAACC,IAAD,EAAyB;AACzB,WAAO,KAAKN,EAAL,CAAQI,OAAR,CAAgB,yCAAhB,EAA2DG,GAA3D,CAA+DD,IAAI,CAACE,GAApE,CAAP;AACH;AAED;;;;;AAGAC,EAAAA,IAAI,CAACC,WAAD,EAA2B;AAC3B,SAAKP,eAAL,CAAqBQ,GAArB,CAAyB,CAACD,WAAW,CAACF,GAAb,EAAkBE,WAAW,CAACE,OAAZ,GAAsB,CAAtB,GAA0B,CAA5C,CAAzB;AACH;AAED;;;;;AAGAC,EAAAA,KAAK,GAAG;AACJ,SAAKb,EAAL,CAAQa,KAAR;AACH;AAED;;;;;AAGAd,EAAAA,uBAAuB,GAAG;AACtB,SAAKD,MAAL,GAAc,gBAAK,KAAKD,IAAL,CAAUiB,MAAV,CAAiBC,QAAtB,EAAgC,KAAKlB,IAAL,CAAUmB,WAAV,EAAhC,EAAyD,cAAzD,CAAd;;AACA,QAAI,CAAC,oBAAW,KAAKlB,MAAhB,CAAL,EAA8B;AAC1B,yBAAU,KAAKA,MAAf;AACH;;AACD,SAAKI,YAAL,GAAoB,gBAAK,KAAKJ,MAAV,EAAkB,sBAAlB,CAApB;;AACA,QAAI,CAAC,oBAAW,KAAKI,YAAhB,CAAL,EAAoC;AAChC,UAAIe,UAAU,GAAG,gBAAK,mBAAQC,UAAR,CAAL,EAA0B,+BAA1B,CAAjB;AACA,4BAAaD,UAAb,EAAyB,KAAKf,YAA9B;AACH;AACJ;;AAlEuC","sourcesContent":["// @flow\nimport Database from 'better-sqlite3';\nimport {existsSync, mkdirSync, copyFileSync} from 'fs';\nimport Args from '../Model/Args';\nimport LinkChecked from '../Model/LinkChecked';\nimport {join, dirname} from \"path\";\n\ntype SqliteDatabase = {\n    prepare: (statement: string) => any;\n    close: () => void;\n};\n\nexport default class LinksCheckedRepository {\n\n    db: SqliteDatabase;\n    /**\n     * From the commandline.\n     */\n    args: Args;\n    /**\n     * Folder to save the broken links to.\n     */\n    folder: string;\n    /**\n     * Location of the database file.\n     */\n    databaseFile: string;\n    /**\n     * Reusable insert statement.\n     */\n    insertStatement: any;\n\n    /**\n     * Create a broken links repo.\n     * @param args {Args} from the commandline.\n     */\n    constructor(args: Args) {\n        this.args = args;\n        this.folder = '';\n        this.createBrokenLinksFolder();\n        this.db = new Database(this.databaseFile, {});\n        this.insertStatement = this.db.prepare('INSERT INTO links_checked VALUES (?, ?)');\n    }\n\n    /**\n     * Find a checked link give a link.\n     */\n    find(link: LinkChecked): any {\n        return this.db.prepare('SELECT * FROM links_checked WHERE url=?').get(link.url);\n    }\n\n    /**\n     * Save the checked link.\n     */\n    save(linkChecked: LinkChecked) {\n        this.insertStatement.run([linkChecked.url, linkChecked.working ? 1 : 0]);\n    }\n\n    /**\n     * Close the database when done.\n     */\n    close() {\n        this.db.close();\n    }\n\n    /**\n     * Creates a broken links folder in the project folder.\n     */\n    createBrokenLinksFolder() {\n        this.folder = join(this.args.output.filename, this.args.getSiteName(), 'broken_links');\n        if (!existsSync(this.folder)) {\n            mkdirSync(this.folder)\n        }\n        this.databaseFile = join(this.folder, 'links_checked.sqlite');\n        if (!existsSync(this.databaseFile)) {\n            let tempDbFile = join(dirname(__filename), '../Asset/links_checked.sqlite');\n            copyFileSync(tempDbFile, this.databaseFile)\n        }\n    }\n}"],"file":"LinksCheckedRepository.js"}