#!/usr/bin/env node

const HtmlUrlChecker = require("broken-link-checker").HtmlUrlChecker;
const commandLineArgs = require('command-line-args');
const getUsage = require('command-line-usage');

const UrlsRepository = require('./src/Repository/UrlsRepository');
const OptionsRepository = require('./src/Repository/OptionsRepository');
const BrokenLinksRepository = require('./src/Repository/BrokenLinksRepository');

const menu = require('./src/Model/Menu');
const Args = require('./src/Model/Args');
const Url = require('./src/Model/Url');

let args = new Args(commandLineArgs(menu[1]['optionList']));

if (args.shouldShowHelp()) {
    console.log(getUsage(menu));
} else {
    // Load the option.
    let optionsRepository = new OptionsRepository(args);
    let option = optionsRepository.getOption();

    // Load the urls to test.
    let urlsRepository = new UrlsRepository(option, args);
    let urls = urlsRepository.findForRange();

    let brokenLinksRepository = new BrokenLinksRepository(option, args);

    let htmlUrlChecker = new HtmlUrlChecker({}, {
        'link': (result, /** @type {Url} */url) => {
            if(result.broken) {
                console.log(result.base.original + " => " + result.url.original);
                url.addBroken(result.url.original);
            }
        },
        'end': () => {
            console.log('Saving found broken links.');
            urls.forEach(url => brokenLinksRepository.save(url));
            console.log('Done.');
        }
    });

    urls.forEach(url => htmlUrlChecker.enqueue(url.url, url));
}